//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/Tec/Scripts/Inputs/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""SteeringWheel"",
            ""id"": ""68daa4cb-ee73-440e-a7d9-5e73d6a9023b"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""d1c03a70-84b8-472b-9a63-dc0a4ea9b8c2"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PortThrottle"",
                    ""type"": ""Value"",
                    ""id"": ""5e75f0ad-615f-498b-862f-90ff76ef5395"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StarboardThrottle"",
                    ""type"": ""Value"",
                    ""id"": ""750dbbbf-1f08-446f-8553-4156c7ba924b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PortToggle"",
                    ""type"": ""Button"",
                    ""id"": ""175d5834-498e-4d8e-b56f-9ffaab3d1d75"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StarboardToggle"",
                    ""type"": ""Button"",
                    ""id"": ""0e803439-fd65-45df-a742-8d0b04cf501b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Day"",
                    ""type"": ""Button"",
                    ""id"": ""b36b90ba-e374-4239-b88f-ff141e8a8c0b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Night"",
                    ""type"": ""Button"",
                    ""id"": ""69bfc36e-d693-49b5-a8eb-cf5d8d4c6469"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74aefeca-892a-41ef-b1ca-527ffe47c4b2"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a688d10-6a69-4686-b311-b272d3b7660c"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PortThrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3a201ca-07c2-4780-879d-2281f9156fe4"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StarboardThrottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13f583bc-3126-4404-b1c7-55a6c2c1ffdb"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/button61"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PortToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71a2edb0-baa0-4481-ba00-d4ad7464f653"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/button62"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StarboardToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a60444f-ba8b-40fc-a6ae-babd7c2e0718"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Day"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bb603cb-777e-4ecb-9a5a-d3d7458dd587"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Night"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SteeringWheel
        m_SteeringWheel = asset.FindActionMap("SteeringWheel", throwIfNotFound: true);
        m_SteeringWheel_Turn = m_SteeringWheel.FindAction("Turn", throwIfNotFound: true);
        m_SteeringWheel_PortThrottle = m_SteeringWheel.FindAction("PortThrottle", throwIfNotFound: true);
        m_SteeringWheel_StarboardThrottle = m_SteeringWheel.FindAction("StarboardThrottle", throwIfNotFound: true);
        m_SteeringWheel_PortToggle = m_SteeringWheel.FindAction("PortToggle", throwIfNotFound: true);
        m_SteeringWheel_StarboardToggle = m_SteeringWheel.FindAction("StarboardToggle", throwIfNotFound: true);
        m_SteeringWheel_Day = m_SteeringWheel.FindAction("Day", throwIfNotFound: true);
        m_SteeringWheel_Night = m_SteeringWheel.FindAction("Night", throwIfNotFound: true);
    }

    ~@InputMap()
    {
        Debug.Assert(!m_SteeringWheel.enabled, "This will cause a leak and performance issues, InputMap.SteeringWheel.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SteeringWheel
    private readonly InputActionMap m_SteeringWheel;
    private List<ISteeringWheelActions> m_SteeringWheelActionsCallbackInterfaces = new List<ISteeringWheelActions>();
    private readonly InputAction m_SteeringWheel_Turn;
    private readonly InputAction m_SteeringWheel_PortThrottle;
    private readonly InputAction m_SteeringWheel_StarboardThrottle;
    private readonly InputAction m_SteeringWheel_PortToggle;
    private readonly InputAction m_SteeringWheel_StarboardToggle;
    private readonly InputAction m_SteeringWheel_Day;
    private readonly InputAction m_SteeringWheel_Night;
    public struct SteeringWheelActions
    {
        private @InputMap m_Wrapper;
        public SteeringWheelActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Turn => m_Wrapper.m_SteeringWheel_Turn;
        public InputAction @PortThrottle => m_Wrapper.m_SteeringWheel_PortThrottle;
        public InputAction @StarboardThrottle => m_Wrapper.m_SteeringWheel_StarboardThrottle;
        public InputAction @PortToggle => m_Wrapper.m_SteeringWheel_PortToggle;
        public InputAction @StarboardToggle => m_Wrapper.m_SteeringWheel_StarboardToggle;
        public InputAction @Day => m_Wrapper.m_SteeringWheel_Day;
        public InputAction @Night => m_Wrapper.m_SteeringWheel_Night;
        public InputActionMap Get() { return m_Wrapper.m_SteeringWheel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SteeringWheelActions set) { return set.Get(); }
        public void AddCallbacks(ISteeringWheelActions instance)
        {
            if (instance == null || m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Add(instance);
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @PortThrottle.started += instance.OnPortThrottle;
            @PortThrottle.performed += instance.OnPortThrottle;
            @PortThrottle.canceled += instance.OnPortThrottle;
            @StarboardThrottle.started += instance.OnStarboardThrottle;
            @StarboardThrottle.performed += instance.OnStarboardThrottle;
            @StarboardThrottle.canceled += instance.OnStarboardThrottle;
            @PortToggle.started += instance.OnPortToggle;
            @PortToggle.performed += instance.OnPortToggle;
            @PortToggle.canceled += instance.OnPortToggle;
            @StarboardToggle.started += instance.OnStarboardToggle;
            @StarboardToggle.performed += instance.OnStarboardToggle;
            @StarboardToggle.canceled += instance.OnStarboardToggle;
            @Day.started += instance.OnDay;
            @Day.performed += instance.OnDay;
            @Day.canceled += instance.OnDay;
            @Night.started += instance.OnNight;
            @Night.performed += instance.OnNight;
            @Night.canceled += instance.OnNight;
        }

        private void UnregisterCallbacks(ISteeringWheelActions instance)
        {
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @PortThrottle.started -= instance.OnPortThrottle;
            @PortThrottle.performed -= instance.OnPortThrottle;
            @PortThrottle.canceled -= instance.OnPortThrottle;
            @StarboardThrottle.started -= instance.OnStarboardThrottle;
            @StarboardThrottle.performed -= instance.OnStarboardThrottle;
            @StarboardThrottle.canceled -= instance.OnStarboardThrottle;
            @PortToggle.started -= instance.OnPortToggle;
            @PortToggle.performed -= instance.OnPortToggle;
            @PortToggle.canceled -= instance.OnPortToggle;
            @StarboardToggle.started -= instance.OnStarboardToggle;
            @StarboardToggle.performed -= instance.OnStarboardToggle;
            @StarboardToggle.canceled -= instance.OnStarboardToggle;
            @Day.started -= instance.OnDay;
            @Day.performed -= instance.OnDay;
            @Day.canceled -= instance.OnDay;
            @Night.started -= instance.OnNight;
            @Night.performed -= instance.OnNight;
            @Night.canceled -= instance.OnNight;
        }

        public void RemoveCallbacks(ISteeringWheelActions instance)
        {
            if (m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISteeringWheelActions instance)
        {
            foreach (var item in m_Wrapper.m_SteeringWheelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SteeringWheelActions @SteeringWheel => new SteeringWheelActions(this);
    public interface ISteeringWheelActions
    {
        void OnTurn(InputAction.CallbackContext context);
        void OnPortThrottle(InputAction.CallbackContext context);
        void OnStarboardThrottle(InputAction.CallbackContext context);
        void OnPortToggle(InputAction.CallbackContext context);
        void OnStarboardToggle(InputAction.CallbackContext context);
        void OnDay(InputAction.CallbackContext context);
        void OnNight(InputAction.CallbackContext context);
    }
}
